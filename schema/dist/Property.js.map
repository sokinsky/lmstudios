{"version":3,"file":"Property.js","sourceRoot":"","sources":["../src/Property.ts"],"names":[],"mappings":"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","sourcesContent":["import { Type } from \"@lmstudios/types\";\r\nimport { Context } from \"./Context\";\r\nimport { Model } from \"./Model\";\r\n\r\nexport class Property {\r\n    constructor(model:Model, name:string){\r\n        this.Model = model; \r\n        this.Name = name;\r\n\r\n        var propertyType = Type.GetType(\"any\");\r\n        if (propertyType === undefined)\r\n            propertyType = Type.Create(\"any\");\r\n        this.PropertyType = propertyType;\r\n    }\r\n    public Initialize(data:any) { \r\n        var propertyType = Type.GetType(data.PropertyType);\r\n        if (propertyType === undefined)\r\n            propertyType = Type.Create(data.PropertyType);\r\n        \r\n        if (data.Optional !== undefined){\r\n            if (this.Optional === undefined)\r\n                this.Optional = [];\r\n            for (var optionalData of data.Optional){\r\n                var model = this.Model.Context.Models.find((x:Model) => { return x.Type.UID === optionalData.Model } );\r\n                if (model === undefined)\r\n                    throw new Error(`Property.Initialize():Option.Model(${optionalData.Model}) does not exist!`);\r\n\r\n                var property = model.Properties.find((x:Property) => { return x.Name === optionalData.Name});\r\n                if (property === undefined)\r\n                    throw new Error(`Property.Initialize():Option.Name(${optionalData.Name}) does not exist on Model(${model.Type.FullName})`);\r\n                \r\n                if (! this.Optional.find(x => x === property))\r\n                    this.Optional.push(property);\r\n            }            \r\n        }\r\n        if (data.Principal !== undefined){\r\n            var model = this.Model.Context.Models.find((x:Model) => { return x.Type.UID === optionalData.Model } );\r\n            if (model === undefined)\r\n                throw new Error(`Property.Initialize():Principal.Model(${optionalData.Model}) does not exist!`);\r\n\r\n            var property = model.Properties.find((x:Property) => { return x.Name === optionalData.Name});\r\n            if (property === undefined)\r\n                throw new Error(`Property.Initialize():Principal.Name(${optionalData.Name}) does not exist on Model(${model.Type.FullName})`);\r\n            \r\n\r\n            if (this.Principal !== undefined)\r\n                this.Principal = property;\r\n        }\r\n        if (data.Relationship !== undefined){\r\n            if (this.Relationship === undefined)\r\n                this.Relationship = {};\r\n\r\n            for (var key in data.Relationship){\r\n                var propertyData = data.Relationship[key];\r\n                var model = this.Model.Context.Models.find((x:Model) => { return x.Type.UID === propertyData.Model } );\r\n                 if (model === undefined)\r\n                    throw new Error(`Property.Initialize():Relationship.Model(${propertyData.Model}) does not exist!`);\r\n\r\n                var property = model.Properties.find((x:Property) => { return x.Name === propertyData.Name});\r\n                if (property === undefined)\r\n                    throw new Error(`Property.Initialize():Relationship.Name(${propertyData.Name}) does not exist on Model(${model.Type.FullName})`);\r\n                \r\n                this.Relationship[key] = property;\r\n            }\r\n        }       \r\n        if (data.References !== undefined){\r\n            if (this.References === undefined)\r\n                this.References = [];\r\n            \r\n            for (var referenceData of data.References){\r\n                var model = this.Model.Context.Models.find((x:Model) => { return x.Type.UID === referenceData.Model } );\r\n                if (model === undefined)\r\n                    throw new Error(`Property.Initialize():Relationship.Model(${referenceData.Model}) does not exist!`);\r\n\r\n                    var property = model.Properties.find((x:Property) => { return x.Name === referenceData.Name});\r\n                if (property === undefined)\r\n                    throw new Error(`Property.Initialize():Relationship.Name(${referenceData.Name}) does not exist on Model(${model.Type.FullName})`);\r\n                \r\n                if (! this.References.find(x => { return x === property }))\r\n                    this.References.push(property);\r\n            }\r\n\r\n        }\r\n    }\r\n    public Model:Model;\r\n    public Name:string;\r\n    public PropertyType:Type;\r\n    public Required:boolean = false;\r\n\r\n    public Principal?:Property;\r\n    public Optional?:Property[];\r\n    public Relationship?:{[name:string]:Property};\r\n    public References?:Property[];\r\n\r\n    public GetValue(item:any){\r\n        return item[this.Name];\r\n    }\r\n    public SetValue(item:any, value:any){\r\n        item[this.Name] = value;\r\n    }\r\n}"]}