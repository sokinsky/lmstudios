{"version":3,"file":"Model.js","sourceRoot":"","sources":["../src/Model.ts"],"names":[],"mappings":"AAKA,MAAM,OAAO,KAAK;IACd,YAAY,OAAe,EAAE,IAAS;QAM/B,eAAU,GAAc,EAAE,CAAC;QAM3B,SAAI,GAAS,EAAE,CAAC;QAXnB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CAAC;IAIM,WAAW,CAAC,IAAW;QAC1B,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;YAC5B,OAAO,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC;QAC1B,CAAC,CAAC,CAAC;IACP,CAAC;IAED,IAAW,UAAU;QACjB,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC;YACrB,MAAM,IAAI,KAAK,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,8BAA8B,CAAC,CAAC;QAC9E,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACvB,IAAI,GAAG,CAAC,UAAU,CAAC,MAAM,IAAI,CAAC;YAC1B,MAAM,IAAI,KAAK,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,8BAA8B,CAAC,CAAC;QAC9E,OAAO,GAAG,CAAC;IACf,CAAC;IACD,IAAW,kBAAkB;QACzB,OAAO,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IACzC,CAAC;IACD,IAAW,cAAc;QACrB,IAAI,MAAM,GAAS,EAAE,CAAC;QACtB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAA,EAAE;YACnB,IAAI,GAAG,KAAK,IAAI,CAAC,UAAU;gBACvB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;IAClB,CAAC;CACJ","sourcesContent":["import { Type } from \"@lmstudios/types\";\r\nimport { Context } from \"./Context\";\r\nimport { Key } from \"./Key\";\r\nimport { Property } from \"./Property\";\r\n\r\nexport class Model  {\r\n    constructor(context:Context, type:Type){\r\n        this.Context = context;\r\n        this.Type = type;\r\n    }\r\n    public Context:Context;\r\n    public Type:Type;\r\n    public Properties:Property[] = [];\r\n    public GetProperty(name:string):Property|undefined{\r\n        return this.Properties.find(x => {\r\n            return x.Name == name;\r\n        });        \r\n    }\r\n    public Keys:Key[] = [];\r\n    public get PrimaryKey():Key{\r\n        if (this.Keys.length == 0)\r\n            throw new Error(`Type(${this.Type.FullName}) does not have a PrimaryKey`);\r\n        var key = this.Keys[0];\r\n        if (key.Properties.length != 1)\r\n            throw new Error(`Type(${this.Type.FullName}) does not have a PrimaryKey`);\r\n        return key;\r\n    }\r\n    public get PrimaryKeyProperty():Property{\r\n        return this.PrimaryKey.Properties[0];\r\n    }\r\n    public get AdditionalKeys():Key[]{\r\n        var result:Key[] = [];\r\n        this.Keys.forEach(key=>{\r\n            if (key !== this.PrimaryKey)\r\n                result.push(key);\r\n        });\r\n        return result;\r\n    }\r\n}\r\n"]}