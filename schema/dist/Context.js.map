{"version":3,"file":"Context.js","sourceRoot":"","sources":["../src/Context.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,kBAAkB,CAAC;AACxC,OAAO,EAAE,GAAG,EAAE,MAAM,OAAO,CAAC;AAC5B,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAChC,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AAEtC,MAAM,OAAO,OAAO;IAChB,YAAY,WAAgB;QAsCrB,WAAM,GAAW,EAAE,CAAC;QArCrB,IAAI,WAAW,KAAK,SAAS,EAAC;YAC5B,IAAI,WAAW,CAAC,MAAM,KAAK,SAAS,EAAC;gBACjC,KAAK,IAAI,SAAS,IAAI,WAAW,CAAC,MAAM,EAAC;oBACrC,IAAI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;oBAC5C,IAAI,IAAI,KAAK,SAAS;wBAClB,MAAM,IAAI,KAAK,CAAC,iCAAiC,SAAS,CAAC,QAAQ,GAAG,CAAC,CAAC;oBAC5E,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,GAAG,OAAO,CAAC,CAAC,IAAI,KAAK,IAAI,CAAA,CAAA,CAAC,CAAC,CAAC;oBAC7D,IAAI,KAAK,KAAK,SAAS,EAAC;wBACpB,KAAK,GAAG,IAAI,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;wBAC9B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;qBAC3B;oBACD,IAAI,SAAS,CAAC,UAAU,KAAK,SAAS,EAAC;wBACnC,KAAK,IAAI,YAAY,IAAI,SAAS,CAAC,UAAU,EAAC;4BAC1C,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,KAAK,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;yBACjE;qBACJ;oBACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBAC3B;aACJ;YACD,KAAK,IAAI,KAAK,IAAI,IAAI,CAAC,MAAM,EAAC;gBAC1B,IAAI,SAAS,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAK,EAAE,EAAE,GAAG,OAAO,CAAC,CAAC,QAAQ,KAAK,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAE,CAAC;gBACpG,KAAK,IAAI,QAAQ,IAAI,KAAK,CAAC,UAAU,EAAC;oBAClC,IAAI,YAAY,GAAG,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAK,EAAE,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC,IAAI,KAAK,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAChG,IAAI,YAAY,KAAK,SAAS;wBAC1B,QAAQ,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;iBACzC;gBACD,KAAK,IAAI,OAAO,IAAI,SAAS,CAAC,IAAI,EAAC;oBAC/B,IAAI,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAK,EAAE,EAAE,GAAE,OAAO,CAAC,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,CAAA,CAAA,CAAC,CAAC,CAAC;oBACtE,IAAI,GAAG,KAAK,SAAS,EAAC;wBAClB,GAAG,GAAG,IAAI,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;wBAC9B,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;qBACxB;iBACJ;aACJ;SACJ;IAEL,CAAC;CAEJ","sourcesContent":["import { Type } from \"@lmstudios/types\";\r\nimport { Key } from \"./Key\";\r\nimport { Model } from \"./Model\";\r\nimport { Property } from \"./Property\";\r\n\r\nexport class Context {\r\n    constructor(contextData?:any){\r\n          if (contextData !== undefined){\r\n            if (contextData.Models !== undefined){\r\n                for (var modelData of contextData.Models){                    \r\n                    var type = Type.GetType(modelData.FullName);\r\n                    if (type === undefined)\r\n                        throw new Error(`Unable to find model of type '${modelData.FullName}'`);\r\n                    var model = this.Models.find(x => { return x.Type === type});\r\n                    if (model === undefined){\r\n                        model = new Model(this, type);\r\n                        this.Models.push(model);\r\n                    }                       \r\n                    if (modelData.Properties !== undefined){\r\n                        for (var propertyData of modelData.Properties){\r\n                            model.Properties.push(new Property(model, propertyData.Name));\r\n                        }\r\n                    }\r\n                    this.Models.push(model);\r\n                }     \r\n            }            \r\n            for (let model of this.Models){\r\n                var modelData = contextData.Models.find((x:any) => { return x.FullName === model.Type.FullName; } );\r\n                for (let property of model.Properties){\r\n                    let propertyData = modelData.Properties.find((x:any) => { return (x.Name === property.Name); });\r\n                    if (propertyData !== undefined)\r\n                        property.Initialize(propertyData);\r\n                }\r\n                for (let keyData of modelData.Keys){\r\n                    let key = model.Keys.find((x:any) => {return x.Name == keyData.Name});\r\n                    if (key === undefined){\r\n                        key = new Key(model, keyData);\r\n                        model.Keys.push(key);\r\n                    }                \r\n                }\r\n            }\r\n        }\r\n       \r\n    }\r\n    public Models:Model[] = [];\r\n}\r\n"]}