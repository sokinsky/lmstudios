{"version":3,"file":"Type.js","sourceRoot":"","sources":["../src/Type.ts"],"names":[],"mappings":"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","sourcesContent":["import { Property } from \"./Property\";\r\n\r\nexport class Type {\r\n    constructor(){\r\n        this.Name = \"\";\r\n        this.Namespace = \"\";\r\n        this.FullName = \"\";  \r\n    } \r\n    public get UID():string{\r\n        return this.FullName;\r\n    }\r\n    public Name:string;\r\n    public Namespace:string;\r\n    public FullName:string;\r\n    public Properties:Property[] = [];\r\n    public GetProperty(name:string):Property|undefined{\r\n        return this.Properties.find(x => { return x.Name === name});\r\n    }\r\n\r\n    public BaseType?:Type;\r\n    public GenericTypes?:Type[];\r\n\r\n\r\n\r\n\r\n\r\n    public Constructor?:(new (...args: any[]) => any);\r\n\r\n\r\n    public IsSubTypeOf(value:string|Type):boolean{\r\n        console.log(value);\r\n        if (typeof(value)===\"string\"){\r\n            var type = Type.GetType(value);\r\n            console.log(value);\r\n            console.log(type);\r\n            if (type instanceof Type)\r\n                return this.IsSubTypeOf(type);\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    public static Create(value:string|(new (...args: any[]) => any)):Type{\r\n        let uid:string = \"\";\r\n        switch (typeof(value)){\r\n            case \"string\":\r\n                uid = <string>value;\r\n                break;\r\n            case \"function\":\r\n                var prototype = (<(new (...args: any[]) => any)>value).prototype;\r\n                if (prototype !== undefined)\r\n                    uid = prototype.typeUID;\r\n                break;\r\n            default:\r\n                throw new Error(`@lmstudios/types:Type.Create():Invalid parameter type`);\r\n        }\r\n        if (uid === undefined)\r\n            throw new Error(`@lmstudios/types:Type.Create():Invalid parameter value`);\r\n        var result = Type.Parse(uid);\r\n\r\n        var types = Type.GetTypes();\r\n        var exists = types.find(x => { return x.UID === result.UID; });\r\n        if (exists === undefined)\r\n            types.push(result);\r\n        else\r\n            result = exists;           \r\n        if (typeof(value) === \"function\"){\r\n            (<(new (...args: any[]) => any)>value).prototype.type = result;\r\n            if (result.Constructor === undefined)\r\n                result.Constructor = value;\r\n        }\r\n        return result;        \r\n\r\n    }\r\n    public static Parse(uid:string):Type{\r\n        var match = uid.match(/^([^<]+)([\\w|\\W]*)/);\r\n        if (! match)\r\n            throw new Error(`@lmstudios/types:Type.Parse():Invalid UID(${uid})`);\r\n        var fullName = match[1].trim();\r\n \r\n        var genericTypes = [];\r\n        match = match[2].trim().match(/^\\s*<(.+)>\\s*$/);\r\n        if (match){\r\n            var genericUIDs = [];\r\n            var genericUID = \"\";\r\n            var openTags = 0;\r\n            for (var i=0; i<match[1].length; i++){\r\n                switch (match[1][i]){\r\n                    case '<': \r\n                        openTags ++;\r\n                        genericUID += match[1][i];\r\n                        break;\r\n                    case '>': \r\n                        openTags --;\r\n                        genericUID += match[1][i];\r\n                    case ',':\r\n                        if (openTags === 0){\r\n                            genericUIDs.push(genericUID);\r\n                            genericUID = \"\";\r\n                        }\r\n                        else{\r\n                            genericUID += match[1][i];\r\n                        }                           \r\n                        break;\r\n                    default:\r\n                        genericUID += match[1][i];\r\n                        break;\r\n                }\r\n            }    \r\n            genericUIDs.push(genericUID);     \r\n            for (var i=0; i<genericUIDs.length; i++){\r\n                genericTypes.push(Type.Create(genericUIDs[i]))\r\n            }\r\n        }\r\n\r\n        var names = fullName.split('.');\r\n        var name = names[names.length-1];\r\n        var namespace = \"\";\r\n        for(var i=0; i<names.length-1; i++){\r\n            namespace += `${names[i]}.`\r\n        };\r\n        namespace = namespace.replace(/\\.$/, \"\");\r\n\r\n        var result = new Type();\r\n        result.Name = name;\r\n        result.Namespace = namespace;\r\n        result.FullName = name;\r\n        if (namespace.length > 0)\r\n            result.FullName = `${namespace}.${name}`\r\n        result.GenericTypes = genericTypes;\r\n        return result;\r\n\r\n\r\n        var result = new Type();\r\n    }\r\n    public static GetType(value:string|(new (...args: any[]) => any)):Type|undefined{\r\n        return Type.GetTypes().find(x => { return x.UID === value; });\r\n    }\r\n\r\n    public static GetTypes():Type[]{\r\n        if ((<any>window).lmstudios == undefined)\r\n            (<any>window).lmstudios = {}     \r\n        if ((<any>window).lmstudios.Types === undefined)\r\n            (<any>window).lmstudios.Types = [];\r\n        return (<any>window).lmstudios.Types;\r\n    }\r\n }\r\n"]}