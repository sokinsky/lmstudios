"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Type {
    constructor() {
        this.Properties = [];
        this.Name = "";
        this.Namespace = "";
        this.FullName = "";
    }
    get UID() {
        return this.FullName;
    }
    GetProperty(name) {
        return this.Properties.find(x => { return x.Name === name; });
    }
    IsSubTypeOf(value) {
        let type;
        if (typeof (value) === "string") {
            type = Type.GetType(value);
            if (!(type instanceof Type))
                return false;
        }
        if (this.Constructor !== undefined) {
            var prototype = this.Constructor;
            while (prototype) {
                console.log(prototype);
                var subType = Type.GetType(prototype);
                prototype = prototype.prototype;
            }
        }
        return false;
    }
    static Create(value) {
        let uid = "";
        switch (typeof (value)) {
            case "string":
                uid = value;
                break;
            case "function":
                var prototype = value.prototype;
                if (prototype !== undefined)
                    uid = prototype.typeUID;
                break;
            default:
                throw new Error(`@lmstudios/types:Type.Create():Invalid parameter type`);
        }
        if (uid === undefined)
            throw new Error(`@lmstudios/types:Type.Create():Invalid parameter value`);
        var result = Type.Parse(uid);
        var types = Type.GetTypes();
        var exists = types.find(x => { return x.UID === result.UID; });
        if (exists === undefined)
            types.push(result);
        else
            result = exists;
        if (typeof (value) === "function") {
            value.prototype.type = result;
            if (result.Constructor === undefined)
                result.Constructor = value;
        }
        return result;
    }
    static Parse(uid) {
        var match = uid.match(/^([^<]+)([\w|\W]*)/);
        if (!match)
            throw new Error(`@lmstudios/types:Type.Parse():Invalid UID(${uid})`);
        var fullName = match[1].trim();
        var genericTypes = [];
        match = match[2].trim().match(/^\s*<(.+)>\s*$/);
        if (match) {
            var genericUIDs = [];
            var genericUID = "";
            var openTags = 0;
            for (var i = 0; i < match[1].length; i++) {
                switch (match[1][i]) {
                    case '<':
                        openTags++;
                        genericUID += match[1][i];
                        break;
                    case '>':
                        openTags--;
                        genericUID += match[1][i];
                    case ',':
                        if (openTags === 0) {
                            genericUIDs.push(genericUID);
                            genericUID = "";
                        }
                        else {
                            genericUID += match[1][i];
                        }
                        break;
                    default:
                        genericUID += match[1][i];
                        break;
                }
            }
            genericUIDs.push(genericUID);
            for (var i = 0; i < genericUIDs.length; i++) {
                genericTypes.push(Type.Create(genericUIDs[i]));
            }
        }
        var names = fullName.split('.');
        var name = names[names.length - 1];
        var namespace = "";
        for (var i = 0; i < names.length - 1; i++) {
            namespace += `${names[i]}.`;
        }
        ;
        namespace = namespace.replace(/\.$/, "");
        var result = new Type();
        result.Name = name;
        result.Namespace = namespace;
        result.FullName = name;
        if (namespace.length > 0)
            result.FullName = `${namespace}.${name}`;
        result.GenericTypes = genericTypes;
        return result;
        var result = new Type();
    }
    static GetType(value) {
        console.log(value);
        switch (typeof (value)) {
            case "string":
                return Type.GetTypes().find(x => { return x.UID === value; });
            case "function":
                console.log(value);
                var result = Type.GetTypes().find(x => { return x.__proto__ === value; });
                console.log(result);
                return result;
            default:
                console.log(typeof (value));
                break;
        }
    }
    static GetTypes() {
        if (window.lmstudios == undefined)
            window.lmstudios = {};
        if (window.lmstudios.Types === undefined)
            window.lmstudios.Types = [];
        return window.lmstudios.Types;
    }
}
exports.Type = Type;
//# sourceMappingURL=data:application/json;base64,