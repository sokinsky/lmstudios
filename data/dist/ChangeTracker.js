"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ChangeStatus;
(function (ChangeStatus) {
    ChangeStatus["Detached"] = "Detached";
    ChangeStatus["Unchanged"] = "Unchanged";
    ChangeStatus["Modified"] = "Modified";
    ChangeStatus["Added"] = "Added";
    ChangeStatus["Deleted"] = "Deleted";
})(ChangeStatus = exports.ChangeStatus || (exports.ChangeStatus = {}));
class ChangeEntry {
    constructor(model) {
        this.Model = model;
    }
}
exports.ChangeEntry = ChangeEntry;
class ChangeTracker {
    constructor(context) {
        this.Context = context;
    }
    GetEntries(...statuses) {
        if (statuses.length == 0)
            return [];
        var results = [];
        for (var status of statuses) {
            for (var repository of this.Context.Repositories) {
                var models = repository.Items.filter(x => { return x.__controller.Status.Change.Model === status; });
                for (var model of models) {
                    var exists = results.find(x => { return x.Model === model; });
                    if (exists === undefined) {
                        var result = new ChangeEntry(model);
                        results.push(result);
                    }
                }
            }
        }
        return results;
    }
    get Entries() {
        return this.GetEntries(ChangeStatus.Added, ChangeStatus.Modified, ChangeStatus.Deleted, ChangeStatus.Unchanged);
        ;
    }
    get Changes() {
        return this.GetEntries(ChangeStatus.Added, ChangeStatus.Modified, ChangeStatus.Deleted);
    }
    GetBridgeChanges() {
        var results = [];
        this.Changes.forEach((entry) => {
            results.push({
                ID: entry.Model.__controller.ID,
                Type: entry.Model.GetSchema().Type.FullName,
                Value: entry.Model.__controller.Values.Local
            });
        });
        return results;
    }
}
exports.ChangeTracker = ChangeTracker;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hhbmdlVHJhY2tlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9DaGFuZ2VUcmFja2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0EsSUFBWSxZQUFvSDtBQUFoSSxXQUFZLFlBQVk7SUFBRyxxQ0FBcUIsQ0FBQTtJQUFFLHVDQUFxQixDQUFBO0lBQUUscUNBQW1CLENBQUE7SUFBRSwrQkFBYSxDQUFBO0lBQUUsbUNBQWlCLENBQUE7QUFBQyxDQUFDLEVBQXBILFlBQVksR0FBWixvQkFBWSxLQUFaLG9CQUFZLFFBQXdHO0FBQ2hJLE1BQWEsV0FBVztJQUNwQixZQUFZLEtBQVc7UUFDbkIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDdkIsQ0FBQztDQUVKO0FBTEQsa0NBS0M7QUFDRCxNQUFhLGFBQWE7SUFDekIsWUFBWSxPQUFnQjtRQUMzQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUN4QixDQUFDO0lBRVMsVUFBVSxDQUFDLEdBQUcsUUFBdUI7UUFDeEMsSUFBSSxRQUFRLENBQUMsTUFBTSxJQUFJLENBQUM7WUFDcEIsT0FBTyxFQUFFLENBQUM7UUFDZCxJQUFJLE9BQU8sR0FBaUIsRUFBRSxDQUFDO1FBQy9CLEtBQUssSUFBSSxNQUFNLElBQUksUUFBUSxFQUFDO1lBQ3hCLEtBQUssSUFBSSxVQUFVLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUM7Z0JBQzdDLElBQUksTUFBTSxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsT0FBTyxDQUFDLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNyRyxLQUFLLElBQUksS0FBSyxJQUFJLE1BQU0sRUFBQztvQkFDckIsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLE9BQU8sQ0FBQyxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDOUQsSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFDO3dCQUNyQixJQUFJLE1BQU0sR0FBRyxJQUFJLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQzt3QkFDcEMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztxQkFDeEI7aUJBQ0o7YUFDSjtTQUNKO1FBQ0QsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztJQUNELElBQVcsT0FBTztRQUNkLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7UUFBQSxDQUFDO0lBQ3JILENBQUM7SUFDRCxJQUFXLE9BQU87UUFDZCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM1RixDQUFDO0lBQ00sZ0JBQWdCO1FBQ25CLElBQUksT0FBTyxHQUFTLEVBQUUsQ0FBQztRQUM3QixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQWtCLEVBQUUsRUFBRTtZQUNsQyxPQUFPLENBQUMsSUFBSSxDQUFDO2dCQUNULEVBQUUsRUFBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxFQUFFO2dCQUM5QixJQUFJLEVBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUTtnQkFDMUMsS0FBSyxFQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxLQUFLO2FBQzlDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztDQUNKO0FBeENELHNDQXdDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnRleHQgfSBmcm9tIFwiLi9Db250ZXh0XCI7XHJcbmltcG9ydCB7IE1vZGVsIH0gZnJvbSBcIi4vTW9kZWxcIjtcclxuXHJcbmV4cG9ydCBlbnVtIENoYW5nZVN0YXR1cyB7IERldGFjaGVkID0gXCJEZXRhY2hlZFwiLCBVbmNoYW5nZWQ9XCJVbmNoYW5nZWRcIiwgTW9kaWZpZWQ9XCJNb2RpZmllZFwiLCBBZGRlZD1cIkFkZGVkXCIsIERlbGV0ZWQ9XCJEZWxldGVkXCIgfVxyXG5leHBvcnQgY2xhc3MgQ2hhbmdlRW50cnkge1xyXG4gICAgY29uc3RydWN0b3IobW9kZWw6TW9kZWwpe1xyXG4gICAgICAgIHRoaXMuTW9kZWwgPSBtb2RlbDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBNb2RlbDpNb2RlbFxyXG59XHJcbmV4cG9ydCBjbGFzcyBDaGFuZ2VUcmFja2VyIHtcclxuXHRjb25zdHJ1Y3Rvcihjb250ZXh0OiBDb250ZXh0KSB7XHJcblx0XHR0aGlzLkNvbnRleHQgPSBjb250ZXh0O1xyXG5cdH1cclxuXHRwdWJsaWMgQ29udGV4dDogQ29udGV4dDtcclxuICAgIHB1YmxpYyBHZXRFbnRyaWVzKC4uLnN0YXR1c2VzOkNoYW5nZVN0YXR1c1tdKTpDaGFuZ2VFbnRyeVtde1xyXG4gICAgICAgIGlmIChzdGF0dXNlcy5sZW5ndGggPT0gMClcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIHZhciByZXN1bHRzOkNoYW5nZUVudHJ5W10gPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBzdGF0dXMgb2Ygc3RhdHVzZXMpe1xyXG4gICAgICAgICAgICBmb3IgKHZhciByZXBvc2l0b3J5IG9mIHRoaXMuQ29udGV4dC5SZXBvc2l0b3JpZXMpe1xyXG4gICAgICAgICAgICAgICAgdmFyIG1vZGVscyA9IHJlcG9zaXRvcnkuSXRlbXMuZmlsdGVyKHggPT4geyByZXR1cm4geC5fX2NvbnRyb2xsZXIuU3RhdHVzLkNoYW5nZS5Nb2RlbCA9PT0gc3RhdHVzOyB9KTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIG1vZGVsIG9mIG1vZGVscyl7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV4aXN0cyA9IHJlc3VsdHMuZmluZCh4ID0+IHsgcmV0dXJuIHguTW9kZWwgPT09IG1vZGVsOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXhpc3RzID09PSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IENoYW5nZUVudHJ5KG1vZGVsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHRzO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGdldCBFbnRyaWVzKCk6Q2hhbmdlRW50cnlbXXtcclxuICAgICAgICByZXR1cm4gdGhpcy5HZXRFbnRyaWVzKENoYW5nZVN0YXR1cy5BZGRlZCwgQ2hhbmdlU3RhdHVzLk1vZGlmaWVkLCBDaGFuZ2VTdGF0dXMuRGVsZXRlZCwgQ2hhbmdlU3RhdHVzLlVuY2hhbmdlZCk7O1xyXG4gICAgfVxyXG4gICAgcHVibGljIGdldCBDaGFuZ2VzKCk6Q2hhbmdlRW50cnlbXXtcclxuICAgICAgICByZXR1cm4gdGhpcy5HZXRFbnRyaWVzKENoYW5nZVN0YXR1cy5BZGRlZCwgQ2hhbmdlU3RhdHVzLk1vZGlmaWVkLCBDaGFuZ2VTdGF0dXMuRGVsZXRlZCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgR2V0QnJpZGdlQ2hhbmdlcygpOmFueVtde1xyXG4gICAgICAgIHZhciByZXN1bHRzOmFueVtdID0gW107XHJcblx0XHR0aGlzLkNoYW5nZXMuZm9yRWFjaCgoZW50cnk6IENoYW5nZUVudHJ5KSA9PiB7XHRcclxuICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIElEOmVudHJ5Lk1vZGVsLl9fY29udHJvbGxlci5JRCxcclxuICAgICAgICAgICAgICAgIFR5cGU6ZW50cnkuTW9kZWwuR2V0U2NoZW1hKCkuVHlwZS5GdWxsTmFtZSxcclxuICAgICAgICAgICAgICAgIFZhbHVlOmVudHJ5Lk1vZGVsLl9fY29udHJvbGxlci5WYWx1ZXMuTG9jYWxcclxuICAgICAgICAgICAgfSk7XHRcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0cztcclxuICAgIH0gXHJcbn0iXX0=